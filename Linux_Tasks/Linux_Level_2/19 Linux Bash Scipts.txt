The production support team of xFusionCorp Industries is working on developing some  scripts to automate different day to day tasks. One is to create a  script for taking websites backup. They have a static website running on App Server 1 in Stratos Datacenter, and they need to create a  script named ecommerce_backup.sh which should accomplish the following tasks. (Also remember to place the script under /scripts directory on App Server 1).

a. Create a zip archive named xfusioncorp_ecommerce.zip of /var/www/html/ecommerce directory.

b. Save the archive in /backup/ on App Server 1. This is a temporary storage, as backups from this location will be clean on weekly basis. Therefore, we also need to save this backup archive on Nautilus Backup Server.

c. Copy the created archive to Nautilus Backup Server server in /backup/ location.

d. Please make sure script won't ask for password while copying the archive file. Additionally, the respective server user (for example, tony in case of App Server 1) must be able to run it.


Answer:
Hereâ€™s a step-by-step solution for automating the website backup using the ecommerce_backup.sh script on App Server 1 for xFusionCorp Industries. Each step includes the relevant commands and an explanation.

Step-by-Step Process:

1. SSH into App Server 1:

		thor@jumphost ~$ssh tony@stapp01 
		The authenticity of host 'stapp01 (172.16.238.10)' can't be established.
		ED25519 key fingerprint is SHA256:yHfHGhqXCBD4DoZFPnUf9hRwq0W6xDOIQFAWdsrsnEI.
		This key is not known by any other names
		Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
		Warning: Permanently added 'stapp01' (ED25519) to the list of known hosts.
		tony@stapp01's password: 

Explanation: Log in as user tony on App Server 1.


2. Navigate to the Scripts Directory:

		[tony@stapp01 ~]$cd /scripts/
		
Explanation: The script should be placed under the /scripts directory as per the requirement.


3. Create the ecommerce_backup.sh Script:

		[tony@stapp01 scripts]$sudo vi ecommerce_backup.sh

Explanation: Open a text editor to create the backup script. You'll need sudo access to perform certain administrative tasks.

4. Write the Backup Script: Inside the ecommerce_backup.sh, write the following code:

		#!/bin/

		# Create a zip archive of the ecommerce website
		zip -r /backup/xfusioncorp_ecommerce.zip /var/www/html/ecommerce

		# Copy the backup archive to the Nautilus Backup Server
		scp /backup/xfusioncorp_ecommerce.zip clint@172.16.238.16:/backup/


Explanation:
@ zip -r /backup/xfusioncorp_ecommerce.zip /var/www/html/ecommerce: This command creates a zip archive (xfusioncorp_ecommerce.zip) of the /var/www/html/ecommerce directory and saves it in /backup/.

@ scp /backup/xfusioncorp_ecommerce.zip clint@172.16.238.16:/backup/: This command uses scp to securely copy the zip file to the Nautilus Backup Server (172.16.238.16) into the /backup/ directory.


5. Make the Script Executable:

		[tony@stapp01 scripts]$sudo chmod +x ecommerce_backup.sh 
		
Explanation: Grant execute permissions to the script so it can be run.

6. Set Ownership of the Script:

		[tony@stapp01 scripts]$sudo chown tony:tony ecommerce_backup.sh 
		
Explanation: Change ownership of the script so user tony can run it without issues.


7. Generate an SSH Key (For Passwordless SCP):

[tony@stapp01 scripts]$ssh-keygen
		Input: press enter in every passphrase - 
		
		Generating public/private rsa key pair.
		Enter file in which to save the key (/home/tony/.ssh/id_rsa): 
		Created directory '/home/tony/.ssh'.
		Enter passphrase (empty for no passphrase): 
		Enter same passphrase again: 
		Your identification has been saved in /home/tony/.ssh/id_rsa.
		Your public key has been saved in /home/tony/.ssh/id_rsa.pub.
		The key fingerprint is:
		SHA256:sFWxKnIBIZj47Poz6l2eBNBBme//4BLpy4ML6g//DA8 tony@stapp01.stratos.xfusioncorp.com
		The key's randomart image is:
		+---[RSA 2048]----+
		|.ooo=.    o.     |
		|+ .+..   . .     |
		| + .. o . .      |
		|  +  . = .       |
		| . .o = S        |
		|  . .* .         |
		| + Eooo.         |
		|o B.X+o..        |
		|==oBoO+...       |
		+----[SHA256]-----+
		
Explanation: Generate an SSH key pair (public and private) for user tony. Press Enter for all prompts to accept the default options without a passphrase.


8. Copy the Public Key to the Nautilus Backup Server:



[tony@stapp01 scripts]$ssh-copy-id clint@172.16.238.16

			/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/home/tony/.ssh/id_rsa.pub"
			The authenticity of host '172.16.238.16 (172.16.238.16)' can't be established.
			ECDSA key fingerprint is SHA256:/oD8hKPg6IzyvKuon1Yh1Enq5i3aUa8dM0JroLItr7k.
			ECDSA key fingerprint is MD5:f8:ad:b4:89:ae:c2:aa:72:61:44:ed:b2:14:f7:2d:03.
			Are you sure you want to continue connecting (yes/no)? yes
			/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
			/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
			clint@172.16.238.16's password: H@wk3y3

			Number of key(s) added: 1

			Now try logging into the machine, with:   "ssh 'clint@172.16.238.16'"
			and check to make sure that only the key(s) you wanted were added.
	
Explanation: This copies the public key to the Nautilus Backup Server (clint@172.16.238.16), allowing passwordless authentication when using scp or ssh.


9. Test the ecommerce_backup.sh file & Backup Script:

		[tony@stapp01 scripts]$ls -lh 
			Output:
		total 4.0K
		-rwxr-xr-x 1 tony tony 233 Oct 14 15:57 ecommerce_backup.sh


		[tony@stapp01 scripts]$sh ecommerce_backup.sh 
				Output:
				  adding: var/www/html/ecommerce/ (stored 0%)
				  adding: var/www/html/ecommerce/index.html (stored 0%)
				  adding: var/www/html/ecommerce/.gitkeep (stored 0%)
				xfusioncorp_ecommerce.zip                              100%  623   795.6KB/s   00:00    

Explanation: Run the script to ensure the backup process works. It should create the zip file and transfer it to the Nautilus Backup Server without asking for a password.


10. Verify the Backup on the Nautilus Backup Server: Log in to the Nautilus Backup Server to verify the backup file was copied:



[tony@stapp01 scripts]$ssh clint@172.16.238.16 ....................(Its will be login passwordless)


		[clint@stbkp01 ~]$ls -lh /backup/
total 4.0K
-rw-r--r-- 1 clint clint 623 Oct 14 15:59 xfusioncorp_ecommerce.zip

Explanation: Ensure the xfusioncorp_ecommerce.zip file is present in the /backup/ directory on the Backup Server.


11. grant file and ownership permissions & check the backup under file xfusioncorp_ecommerce.zip:

		[clint@stbkp01 ~]$sudo chmod 755 /backup/

		We trust you have received the usual lecture from the local System
		Administrator. It usually boils down to these three things:

			#1) Respect the privacy of others.
			#2) Think before you type.
			#3) With great power comes great responsibility.

		[sudo] password for clint:H@wk3y3

		[clint@stbkp01 ~]$sudo chown clint:clint /backup/

		[clint@stbkp01 ~]$ls -lh /backup/

		total 4.0K
		-rw-r--r-- 1 clint clint 623 Oct 14 15:59 xfusioncorp_ecommerce.zip




Final Output:

# After running the script, the output during execution will show the creation of the zip archive:

		adding: var/www/html/ecommerce/ (stored 0%)
		adding: var/www/html/ecommerce/index.html (stored 0%)
		adding: var/www/html/ecommerce/.gitkeep (stored 0%)
		
# The scp command output:

		xfusioncorp_ecommerce.zip 100%  623  795.6KB/s   00:00

# On the Backup Server, the file can be verified:

		-rw-r--r-- 1 clint clint 623 Oct 14 15:59 xfusioncorp_ecommerce.zip
		
		
Explanation of Commands:

1. zip: The -r flag is used to recursively include all files and directories under /var/www/html/ecommerce into the zip archive.
2. scp: Securely copies files over SSH. Using passwordless SSH keys ensures the backup process is automated without requiring manual intervention for password input.
3. ssh-keygen and ssh-copy-id: These commands set up passwordless SSH authentication by generating and copying SSH keys to the remote server.






















